{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nmogo = DigitalOut(brain.three_wire_port.h)\nintake = Motor(Ports.PORT20, GearSetting.RATIO_18_1, False)\nlM3 = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\nrM3 = Motor(Ports.PORT7, GearSetting.RATIO_18_1, True)\nlift = Motor(Ports.PORT19, GearSetting.RATIO_6_1, True)\nrMG_motor_a = Motor(Ports.PORT8, GearSetting.RATIO_6_1, False)\nrMG_motor_b = Motor(Ports.PORT9, GearSetting.RATIO_6_1, False)\nrMG = MotorGroup(rMG_motor_a, rMG_motor_b)\nlMG_motor_a = Motor(Ports.PORT5, GearSetting.RATIO_18_1, True)\nlMG_motor_b = Motor(Ports.PORT21, GearSetting.RATIO_18_1, True)\nlMG = MotorGroup(lMG_motor_a, lMG_motor_b)\nhRead = Inertial(Ports.PORT4)\nlb = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\nfrom vex import *\nwDist=10.5\nfwd = 0\ntheta = 0\nwheelCirc = (3.25)*math.pi\nmLeft = 0\nmRight = 0\nclass PIDController():\n    #set vars\n    def __init__(self,kP,kI,kD,setPosition):\n        self.kP = kP\n        self.kI = kI\n        self.kD = kD\n        self.pError = 0\n        self.integral = 0\n        self.setPosition = setPosition\n    def comp(self,currentVal,dT):\n        self.currentVal = currentVal\n        self.dT = dT\n        #error\n        error = self.setPosition-currentVal\n        #kp\n        pTerm = error*self.kP\n        self.integral += error*dT\n        #ki\n        iTerm = self.integral*self.kI\n        #kd\n        deravative = (error-self.pError)/dT\n        dTerm = deravative*self.kD\n        self.pError = error\n        print(error,pTerm+iTerm+dTerm)\n        return pTerm+iTerm+dTerm,error\ndef fMovement(fwd):\n    #calc setpoint\n    lMG.set_position(0,DEGREES)\n    lM3.set_position(0,DEGREES)\n    rMG.set_position(0,DEGREES)\n    rM3.set_position(0,DEGREES)\n    move = fwd*360/wheelCirc *48/36\n    fMovement = PIDController(0.045,0,0.01,move)\n    dt = 15\n    error = 30\n    while True:\n        brain.timer.clear()\n        reading = (lMG.position(DEGREES) + rMG.position(DEGREES))/2\n        vel,error = fMovement.comp(reading,dt)\n        lMG.set_velocity(vel,PERCENT)\n        rMG.set_velocity(vel,PERCENT)\n        lM3.set_velocity(vel,PERCENT)\n        rM3.set_velocity(vel,PERCENT)\n        wait(0.015,SECONDS)\n        dt = brain.timer.time(MSEC)\n        if abs(error) < 30:\n            print(\"good\")\n            vel = 0\n            lMG.set_velocity(vel,PERCENT)\n            rMG.set_velocity(vel,PERCENT)\n            lM3.set_velocity(vel,PERCENT)\n            rM3.set_velocity(vel,PERCENT)\n            break\ndef tMovement(theta,vel):\n    global wheelCirc, wDist\n    while rMG.is_spinning() and lMG.is_spinning():\n        pass\n    wait(0.3,SECONDS)\n    theta = math.radians(theta)/2\n    arc = wDist * theta\n    move = arc*360/wheelCirc\n    mLeft = move *0.8\n    mRight = -move *0.8\n    rMG.set_velocity(vel,PERCENT)\n    rM3.set_velocity(vel,PERCENT)\n    rMG.spin_for(FORWARD,mLeft,DEGREES,wait=False)\n    rM3.spin_for(FORWARD,mLeft,DEGREES,wait=False)\n    lMG.set_velocity(vel,PERCENT)\n    lM3.set_velocity(vel,PERCENT)\n    lMG.spin_for(FORWARD,mRight,DEGREES,wait=False)\n    lM3.spin_for(FORWARD,mRight,DEGREES,wait=False)\ndef pre_autonomous():\n    rMG.set_velocity(0,PERCENT)\n    lMG.set_velocity(0,PERCENT)\n    rM3.set_velocity(0,PERCENT)\n    lM3.set_velocity(0,PERCENT)\n    intake.set_velocity(0,PERCENT)\n    lift.set_velocity(0,PERCENT)\n    rMG.spin(FORWARD)\n    rM3.spin(FORWARD)\n    lMG.spin(FORWARD)\n    lM3.spin(FORWARD)\n    intake.spin(FORWARD)\n    lift.spin(FORWARD)\n    mogo.set(False)\n    hRead.calibrate()\n    wait(2, SECONDS)\ndef autonomous():\n    mogo.set(True)\n    fMovement(-30)\n    wait(1,SECONDS)\n    mogo.set(False)\n    lift.set_velocity(-100,PERCENT)\n    wait(2,SECONDS)\n    mogo.set(True)\n    tMovement(-60,30)\n    wait(1,SECONDS)\n    fMovement(-30)\ndef user_control():\n    rMG.spin(FORWARD)\n    rM3.spin(FORWARD)\n    lMG.spin(FORWARD)\n    lM3.spin(FORWARD)\n    lb.set_velocity(90,PERCENT)\n    while True:\n        rMV = -1*controller_1.axis3.position()\n        lMV = -1*controller_1.axis2.position()\n        rMG.set_velocity(lMV,PERCENT)\n        lMG.set_velocity(rMV,PERCENT)\n        rM3.set_velocity(lMV,PERCENT)\n        lM3.set_velocity(rMV,PERCENT)\n        if controller_1.buttonL2.pressing():\n            intake.set_velocity(100,PERCENT)\n            lift.set_velocity(100,PERCENT)\n        elif controller_1.buttonL1.pressing():\n            intake.set_velocity(-100,PERCENT)\n            lift.set_velocity(-100,PERCENT)\n        else:\n            intake.set_velocity(0,PERCENT)\n            lift.set_velocity(0,PERCENT)\n        if controller_1.buttonR2.pressing():\n            mogo.set(True)\n        else:\n            mogo.set(False)\n        print(hRead.heading(DEGREES))\n        wait(20, MSEC)\n        if controller_1.buttonDown.pressing():\n            lb.spin_to_position(0,DEGREES,wait=False)\n        if controller_1.buttonLeft.pressing():\n            lb.spin_to_position(190,DEGREES,wait=False)\n        if controller_1.buttonUp.pressing():\n            lb.spin_to_position(800,DEGREES,wait=False)\ncomp = Competition(user_control, autonomous)\npre_autonomous()\n#atiksh is a g and he has a bomboclattttttttttttt","textLanguage":"python","robotConfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[8],"name":"mogo","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[20],"name":"intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[3],"name":"lM3","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[7],"name":"rM3","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[19],"name":"lift","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[8,9],"name":"rMG","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio6_1","motor_a_reversed":"false","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[5,21],"name":"lMG","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[4],"name":"hRead","customName":true,"deviceType":"Inertial","deviceClass":"inertial","setting":{"id":"partner"},"triportSourcePort":22},{"port":[1],"name":"lb","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.8","minVersion":"3.1.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}
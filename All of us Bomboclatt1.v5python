{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nmogo = DigitalOut(brain.three_wire_port.h)\nintake = Motor(Ports.PORT20, GearSetting.RATIO_18_1, False)\nlM3 = Motor(Ports.PORT21, GearSetting.RATIO_18_1, False)\nrM3 = Motor(Ports.PORT7, GearSetting.RATIO_6_1, False)\nlift = Motor(Ports.PORT19, GearSetting.RATIO_6_1, True)\nrMG_motor_a = Motor(Ports.PORT8, GearSetting.RATIO_18_1, True)\nrMG_motor_b = Motor(Ports.PORT9, GearSetting.RATIO_18_1, True)\nrMG = MotorGroup(rMG_motor_a, rMG_motor_b)\nlMG_motor_a = Motor(Ports.PORT3, GearSetting.RATIO_18_1, True)\nlMG_motor_b = Motor(Ports.PORT5, GearSetting.RATIO_18_1, False)\nlMG = MotorGroup(lMG_motor_a, lMG_motor_b)\nlb = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nlbRot = Rotation(Ports.PORT2, False)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\nfrom vex import *\nwDist=10.5\nfwd = 0\ntheta = 0\nwheelCirc = (3.25)*math.pi\nmLeft = 0\nmRight = 0\nclass PIDController():\n    def __init__(self,kP,kI,kD,setPosition):\n        self.kP = kP\n        self.kI = kI\n        self.kD = kD\n        self.pError = 0\n        self.integral = 0\n        self.setPosition = setPosition\n    def comp(self,currentVal,dT):\n        self.currentVal = currentVal\n        self.dT = dT\n        error = setPosition-currentVal\n        pTerm = error*self.kP\n        self.integral += error*dT\n        iTerm = self.integral*self.kI\n        deravative = (error-self.pError)/dT\n        dTerm = deravative*self.kD\n        self.pError = error\n        return pTerm+iTerm+dTerm\ndef lbMove(deg):\n    move = PIDController(1,0,0,deg)\n    dt = 0\n    while True:\n        brain.timer.clear()\n        vel = move.comp(lbRot.angle(),dt)\n        lb.set_velocity(vel,PERCENT)\n        wait(15,MSEC)\n        dt = brain.timer.time(MSEC)\n    \ndef fMovement(fwd):\n    global wheelCirc\n    while rMG.is_spinning() and lMG.is_spinning():\n        pass\n    wait(0.3,SECONDS)\n    mLeft = fwd*360/wheelCirc *0.6\n    mRight = fwd*360/wheelCirc *0.6\n    rMG.set_velocity(vel,PERCENT)\n    rM3.set_velocity(vel,PERCENT)\n    rMG.spin_for(FORWARD,mLeft,DEGREES,wait=False)\n    rM3.spin_for(FORWARD,mLeft,DEGREES,wait=False)\n    lMG.set_velocity(vel,PERCENT)\n    lM3.set_velocity(vel,PERCENT)\n    lMG.spin_for(FORWARD,mRight,DEGREES,wait=False)\n    lM3.spin_for(FORWARD,mRight,DEGREES,wait=False)\n    print(fwd)\ndef tMovement(theta,vel):\n    global wheelCirc, wDist\n    while rMG.is_spinning() and lMG.is_spinning():\n        pass\n    wait(0.3,SECONDS)\n    theta = math.radians(theta)/2\n    arc = wDist * theta\n    move = arc*360/wheelCirc\n    mLeft = move *0.6\n    mRight = -move *0.6\n    rMG.set_velocity(vel,PERCENT)\n    rM3.set_velocity(vel,PERCENT)\n    rMG.spin_for(FORWARD,mLeft,DEGREES,wait=False)\n    rM3.spin_for(FORWARD,mLeft,DEGREES,wait=False)\n    lMG.set_velocity(vel,PERCENT)\n    lM3.set_velocity(vel,PERCENT)\n    lMG.spin_for(FORWARD,mRight,DEGREES,wait=False)\n    lM3.spin_for(FORWARD,mRight,DEGREES,wait=False)\ndef pre_autonomous():\n    rMG.set_velocity(0,PERCENT)\n    lMG.set_velocity(0,PERCENT)\n    rM3.set_velocity(0,PERCENT)\n    lM3.set_velocity(0,PERCENT)\n    intake.set_velocity(0,PERCENT)\n    lift.set_velocity(0,PERCENT)\n    rMG.spin(FORWARD)\n    rM3.spin(FORWARD)\n    lMG.spin(FORWARD)\n    lM3.spin(FORWARD)\n    intake.spin(FORWARD)\n    lift.spin(FORWARD)\n    mogo.set(False)\ndef autonomous():\n    intake.set_velocity(100,PERCENT)\n    lift.set_velocity(100,PERCENT)\n    wait(1,SECONDS)\n    tMovement(160,40)\n    fMovement(-40,40)\n    mogo.set(False)\ndef user_control():\n    rMG.spin(FORWARD)\n    rM3.spin(FORWARD)\n    lMG.spin(FORWARD)\n    lM3.spin(FORWARD)\n    while True:\n        rMV = controller_1.axis3.position()\n        lMV = controller_1.axis2.position()\n        rMG.set_velocity(rMV,PERCENT)\n        lMG.set_velocity(lMV,PERCENT)\n        rM3.set_velocity(rMV,PERCENT)\n        lM3.set_velocity(lMV,PERCENT)\n        if controller_1.buttonL2.pressing():\n            intake.set_velocity(100,PERCENT)\n            lift.set_velocity(100,PERCENT)\n        elif controller_1.buttonL1.pressing():\n            intake.set_velocity(-100,PERCENT)\n            lift.set_velocity(-100,PERCENT)\n        else:\n            intake.set_velocity(0,PERCENT)\n            lift.set_velocity(0,PERCENT)\n        if controller_1.buttonR2.pressing():\n            mogo.set(True)\n        else:\n            mogo.set(False)\n        if controller_1.buttonA.pressing():\n            lb.spin_to_position(1150,DEGREES)\n        if controller_1.buttonB.pressing():\n            lb.spin_to_position(715,DEGREES)\n        if controller_1.buttonX.pressing():\n            lb.spin_to_position(165,DEGREES)\ncomp = Competition(user_control, autonomous)\npre_autonomous()\n#atiksh is a g and he has a bomboclattttttttttttt","textLanguage":"python","robotConfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[8],"name":"mogo","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[20],"name":"intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[21],"name":"lM3","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[7],"name":"rM3","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[19],"name":"lift","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[8,9],"name":"rMG","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[3,5],"name":"lMG","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[1],"name":"lb","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[2],"name":"lbRot","customName":true,"deviceType":"Rotation","deviceClass":"rotation","setting":{"reversed":"false","id":"partner"},"triportSourcePort":22}],"slot":3,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.8","minVersion":"3.1.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}